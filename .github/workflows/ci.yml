name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: docker.io
  BACKEND_IMAGE: piktakatya/my-backend
  FRONTEND_IMAGE: piktakatya/my-frontend
  
jobs:
  test:
    runs-on: [self-hosted, linux, docker]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: apps/backend/requirements.txt

      - name: Install dependencies
        run: |
          cd apps/backend
          pip install -r requirements.txt pytest

      - name: Run tests
        run: |
          echo "Run tests"
          pip install pytest
          echo "Current directory: $(pwd)"        
          echo "Running tests from backend directory"
          cd apps/backend
          python -m pytest tests/ -v

  python-lint:
    runs-on: [self-hosted, linux, docker]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: apps/backend/requirements.txt
          
      - name: Install Python linters
        run: pip install flake8 isort black
        
      - name: Run Python linters
        run: |
          echo "=== Running Flake8 ==="
          flake8 --config=apps/backend/.flake8 apps/backend/  
          echo "=== Running Isort ==="
          isort apps/backend/ --check-only --diff
          echo "=== Running Black ==="
          black apps/backend/ --check --diff
          echo " All Python linting checks passed!"

  
  eslint:
    runs-on: [self-hosted, linux, docker]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
    
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install and run ESLint
        run: |
          cd apps/frontend
          npm install eslint@9.0.0 --save-dev
          npm install
          npm run lint
          #  npx eslint . --config eslint.config.js --debug
        

  build-backend:
    runs-on: [self-hosted, linux, docker]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [test, python-lint]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push Backend image
        uses: docker/build-push-action@v5
        with:
          context: ./apps/backend
          file: ./apps/backend/Dockerfile
          push: true
          tags: |
            ${{ env.BACKEND_IMAGE }}:latest
            ${{ env.BACKEND_IMAGE }}:${{ github.sha }}
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
          
      - name: Verify pushed image
        run: |
          echo "Backend image pushed to Docker Hub:"
          echo "https://hub.docker.com/r/${{ env.BACKEND_IMAGE }}"


  build-frontend:
    runs-on: [self-hosted, linux, docker]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [eslint]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push Frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./apps/frontend
          file: ./apps/frontend/Dockerfile
          push: true
          tags: |
            ${{ env.FRONTEND_IMAGE }}:latest
            ${{ env.FRONTEND_IMAGE }}:${{ github.sha }}
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
          
      - name: Verify pushed image
        run: |
          echo "Frontend image pushed to Docker Hub:"
          echo "https://hub.docker.com/r/${{ env.FRONTEND_IMAGE }}"


  deploy:
    runs-on: [self-hosted, k8s, linux, docker]
    needs: [build-backend, build-frontend]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy with Helm
        run: |
          echo "Deploying with Helm"
          helm upgrade --install task2 ./charts/.