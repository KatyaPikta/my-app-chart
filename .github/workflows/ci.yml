name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - 'charts/Chart.yaml'
  
env:
  REGISTRY: docker.io
  BACKEND_IMAGE: piktakatya/my-backend
  FRONTEND_IMAGE: piktakatya/my-frontend
  
jobs:
  build-backend:
    runs-on: [self-hosted, linux, docker]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push Backend image
        uses: docker/build-push-action@v5
        with:
          context: ./apps/backend
          file: ./apps/backend/Dockerfile
          push: true
          tags: |
            ${{ env.BACKEND_IMAGE }}:latest
            ${{ env.BACKEND_IMAGE }}:${{ github.sha }}
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
          
      - name: Verify pushed image
        run: |
          echo "Backend image pushed to Docker Hub:"
          echo "https://hub.docker.com/r/${{ env.BACKEND_IMAGE }}"


  build-frontend:
    runs-on: [self-hosted, linux, docker]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push Frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./apps/frontend
          file: ./apps/frontend/Dockerfile
          push: true
          tags: |
            ${{ env.FRONTEND_IMAGE }}:latest
            ${{ env.FRONTEND_IMAGE }}:${{ github.sha }}
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
          
      - name: Verify pushed image
        run: |
          echo "Frontend image pushed to Docker Hub:"
          echo "https://hub.docker.com/r/${{ env.FRONTEND_IMAGE }}"


  release-chart:
    runs-on: [self-hosted, k8s, linux, docker]
    needs: [build-backend, build-frontend]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN }} 
          
      - name: Debug structure
        run: |
          echo "=== GITHUB WORKSPACE ==="
          echo "$GITHUB_WORKSPACE"
          echo "Current directory:"
          pwd
          echo "Files in current directory:"
          ls -la
          echo "=== FINDING Chart.yaml ==="
          find . -name "Chart.yaml" -type f 2>/dev/null || echo "Chart.yaml not found"
          echo "=== DIRECTORY TREE ==="
          tree -L 3 || find . -type d -name "*chart*" | head -10
          
      - name: Bump chart version and app version
        id: vars
        run: |
          cd charts/
          if git diff --name-only HEAD~1 HEAD |grep -q "^apps/"; then
            current_version=$(grep '^version:' Chart.yaml | cut -d' ' -f2)
            new_version=$(echo $current_version | awk -F. '{$2 = $2 + 1;} 1' | sed 's/ /./g')
            sed -i "s/version: $current_version/version: $new_version/" Chart.yaml
            echo "new_version=$new_version" >> $GITHUB_OUTPUT
            current_version_app=$(grep '^appVersion:' Chart.yaml | cut -d' ' -f2)
            new_version_app=$(echo $current_version_app | awk -F. '{$2 = $2 + 1;} 1' | sed 's/ /./g')\"
            sed -i "s/appVersion: $current_version_app/appVersion: $new_version_app/" Chart.yaml
          else
            current_version=$(grep '^version:' Chart.yaml | cut -d' ' -f2)
            new_version=$(echo $current_version | awk -F. '{$NF = $NF + 1;} 1' | sed 's/ /./g')
            sed -i "s/version: $current_version/version: $new_version/" Chart.yaml
            echo "new_version=$new_version" >> $GITHUB_OUTPUT
            current_version_app=$(grep '^appVersion:' Chart.yaml | cut -d' ' -f2)
            new_version_app=$(echo $current_version_app | awk -F. '{$NF = $NF + 1;} 1' | sed 's/ /./g')\"
            sed -i "s/appVersion: $current_version_app/appVersion: $new_version_app/" Chart.yaml

      - name: Commit with [skip ci]
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add charts/Chart.yaml
          git commit -m "bump chart version to ${{ steps.vars.outputs.new_version }} " 
          git push origin main

      - name: Package Helm chart
        run: |
          helm package charts/ --destination helm-releases/
      
      - name: Upload chart as artifact
        uses: actions/upload-artifact@v4
        with:
          name: helm-charts
          path: helm-releases/
          retention-days: 30
  deploy:
    runs-on: [self-hosted, k8s, linux, docker]
    needs: release-chart
    steps:
      - name: Checkout
        uses: actions/checkout@v4
    
      - name: Download chart artifact
        uses: actions/download-artifact@v4
        with:
          name: helm-charts
      
      - name: Deploy from local chart
        run: |
          CHART_FILE=$(ls *.tgz)
          echo "Deploying chart: $CHART_FILE"
          helm upgrade --install task2 ./$CHART_FILE \
          --set frontend.image.tag=${{ github.sha }} \
          --set backend.image.tag=${{ github.sha }}
      